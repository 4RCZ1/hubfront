import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import axios from "axios";

//const root = 'http://localhost:3001/'
const root = 'https://hubeventsapp.herokuapp.com/'
const baseUrl = root + "events/"

const initialState = {
  status: 'idle',
  events: [],
};
//get all events
export const getEventsAsync = createAsyncThunk(
  'events/getEventsAsync',
  async () => {
    return await axios.get(baseUrl);
  }
);
//add event
export const addEventAsync = createAsyncThunk(
  'events/addEventAsync',
  async (event) => {
    await axios.post(baseUrl, event);
    return event;
  }
);
//remove event by id
export const removeEventAsync = createAsyncThunk(
  'events/removeEventAsync',
  async (id) => {
    await axios.delete(baseUrl + id);
    return id;
  }
);

export const userSlice = createSlice({
  name: 'events',
  initialState,
  reducers: {
    logout: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getEventsAsync.pending, (state) => {
      state.status = 'loading';
    }).addCase(getEventsAsync.fulfilled, (state, action) => {
      state.events = action.payload.data;
      state.status = 'idle';
    }).addCase(getEventsAsync.rejected, (state) => {
      state.status = 'failed';
    }).addCase(addEventAsync.pending, (state) => {
      state.status = 'loading';
    }).addCase(addEventAsync.fulfilled, (state, action) => {
      state.events.push(action.payload.data);
      state.status = 'idle';
    }).addCase(addEventAsync.rejected, (state) => {
      state.status = 'failed';
    }).addCase(removeEventAsync.pending, (state) => {
      state.status = 'loading';
    }).addCase(removeEventAsync.fulfilled, (state, action) => {
      state.events = state.events.filter(event => event.id !== action.payload.data.id);
      state.status = 'idle';
    });

  },
});

export const selectEvents = (state) => state.events;

export default userSlice.reducer;
