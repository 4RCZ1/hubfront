import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {eventsApi} from "./api";

const initialState = {
  status: 'idle',
  events: [],
};
//get all events
export const getEventsAsync = createAsyncThunk(
  'events/getEventsAsync',
  async () => {
    return (await eventsApi.getEvents()).data;
  }
);
//add event
export const addEventAsync = createAsyncThunk(
  'events/addEventAsync',
  async (event) => {
    console.log(event)
    const response = await eventsApi.addEvent(event);
    return {...event, _id:response.insertedId};
  }
);
//remove event by id
export const removeEventAsync = createAsyncThunk(
  'events/removeEventAsync',
  async (id) => {
    await eventsApi.removeEvent(id);
    return id;
  }
);

export const eventsSlice = createSlice({
  name: 'events',
  initialState,
  reducers: {
    logout: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(getEventsAsync.pending, (state) => {
      state.status = 'loading';
    }).addCase(getEventsAsync.fulfilled, (state, action) => {
      state.events = action.payload;
      state.status = 'idle';
    }).addCase(getEventsAsync.rejected, (state) => {
      state.status = 'failed';
    }).addCase(addEventAsync.pending, (state) => {
      state.status = 'loading';
    }).addCase(addEventAsync.fulfilled, (state, action) => {
      state.events.push(action.payload);
      state.status = 'idle';
    }).addCase(addEventAsync.rejected, (state) => {
      state.status = 'failed';
    }).addCase(removeEventAsync.pending, (state) => {
      state.status = 'loading';
    }).addCase(removeEventAsync.fulfilled, (state, action) => {
      state.events = state.events.filter(event => event._id !== action.payload);
      state.status = 'idle';
      console.log(state.events)
    })
    .addCase(removeEventAsync.rejected, (state) => {
      state.status = 'failed';
    });

  },
});

export const selectEvents = (state) => state.events;

export default eventsSlice.reducer;
