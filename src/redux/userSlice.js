import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {usersApi} from "./api";

const initialState = {
  status: 'idle',
  isLoggedIn: false,
  name: null,
  points: 0,
};
export const loginAsync = createAsyncThunk(
  'user/loginAsync',
  async (name) => {
    const response = await usersApi.login(name);
    return response.data;
  }
);

export const signupAsync = createAsyncThunk(
  'user/signupAsync',
  async (name) => {
    const response = await usersApi.signup(name);
    return response.data;
  }
);

export const addPointAsync = createAsyncThunk(
  'user/addPointsAsync',
  async (name) => {
    const response = await usersApi.addPoint(name);
    return response.data;
  }
);

export const deductPointsAsync = createAsyncThunk(
  'user/deductPointsAsync',
  async ({name, points}) => {
    const result = await usersApi.deductPoints(name, points);
    if (result.data.error) {
      return 0;
    }
    return points;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    logout: () => initialState,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        console.log(action.payload);
        if (action.payload.error) {
          state.status = 'failed';
        } else {
          state.status = 'idle';
          state.isLoggedIn = true;
          state.name = action.payload.name;
          state.points = action.payload.points;
        }
      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = 'failed';
        state.loggedIn = false;
      })
      .addCase(signupAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(signupAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isLoggedIn = true;
      })
      .addCase(signupAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(addPointAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(addPointAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.points += 1;
      })
      .addCase(addPointAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(deductPointsAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(deductPointsAsync.fulfilled, (state, action) => {
        if (action.payload) {
          state.status = 'idle';
          state.points -= action.payload;
        }else{
          state.status = 'failed';
        }
      })
      .addCase(deductPointsAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const {logout} = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user;


export default userSlice.reducer;
